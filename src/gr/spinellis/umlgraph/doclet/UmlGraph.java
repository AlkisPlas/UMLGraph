/*
 * Create a graphviz graph based on the classes in the specified java
 * source files.
 *
 * (C) Copyright 2002-2005 Diomidis Spinellis
 *
 * Permission to use, copy, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appear in all copies and that
 * both that copyright notice and this permission notice appear in
 * supporting documentation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Id$
 *
 */

package gr.spinellis.umlgraph.doclet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.sun.javadoc.ClassDoc;
import com.sun.javadoc.LanguageVersion;
import com.sun.javadoc.RootDoc;

/**
 * Doclet API implementation
 * @navassoc - - - gr.spinellis.umlgraph.doclet.Options
 * @depend - - - gr.spinellis.umlgraph.doclet.ClassGraph
 * @depend - - - gr.spinellis.umlgraph.doclet.Version
 *
 * @version $Revision$
 * @author <a href="http://www.spinellis.gr">Diomidis Spinellis</a>
 */
public class UmlGraph {
    /** Entry point */
    public static boolean start(RootDoc root) throws IOException {
	Options opt = new Options();
	opt.setOptions(root.options());
	opt.setOptions(findUMLOptions(root));

	View[] views = buildViews(opt, root);
	if(views == null)
	    return false;
	if (views.length == 0) {
	    buildGraph(root, opt);
	} else {
	    for (int i = 0; i < views.length; i++) {
		buildGraph(root, views[i]);
	    }
	}

	return true;

    }
    
    private static ClassDoc findUMLOptions(RootDoc root) {
	ClassDoc[] classes = root.classes();
	for (ClassDoc cd : classes) {
	    if(cd.name().equals("UMLOptions"))
		    return cd;
	}
	return null;
    }

    /**
     * Builds and outputs a single graph according to the view overrides
     */
    private static void buildGraph(RootDoc root, OptionProvider op) throws IOException {
	Options opt = op.getGlobalOptions();
	opt.openFile();
	prologue(opt);
	ClassDoc[] classes = root.classes();

	ClassGraph c = new ClassGraph(root.specifiedPackages(), op);
	for (int i = 0; i < classes.length; i++) {
	    c.printClass(classes[i]);
	}
	for (int i = 0; i < classes.length; i++) {
	    c.printRelations(classes[i]);
	}

	c.printExtraClasses(root);
	epilogue(opt);
	opt.closeFile();
    }

    
    
    /**
     * Builds the views according to the parameters on the command line
     */
    private static View[] buildViews(Options opt, RootDoc root) {
	if (opt.findViews) {
	    List<View> views = new ArrayList<View>();
	    ClassDoc[] classes = root.classes();
	    for (int i = 0; i < classes.length; i++) {
		if (classes[i].tags("view").length > 0) {
		    views.add(new View(classes[i], opt));
		}
	    }
	    return views.toArray(new View[views.size()]);
	} else if (opt.viewName != null) {
	    ClassDoc viewClass = root.classNamed(opt.viewName);
	    if(viewClass == null) {
		System.out.println("View " + opt.viewName + " not found! Exiting without generating any output.");
		return null;
	    }
	    return new View[] { new View(viewClass, opt) };
	} else {
	    return new View[0];
	}
    }


    /** Option checking */
    public static int optionLength(String option) {
	return Options.optionLength(option);
    }

    /** Indicate the language version we support */
    public static LanguageVersion languageVersion() {
	return LanguageVersion.JAVA_1_5;
    }

    /** Dot prologue */
    private static void prologue(Options opt) {
	opt.w.println(
	    "#!/usr/local/bin/dot\n" +
	    "#\n" +
	    "# Class diagram \n" +
	    "# Generated by UmlGraph version " +
	    Version.VERSION + " (http://www.spinellis.gr/sw/umlgraph)\n" +
	    "#\n\n" +
	    "digraph G {\n" +
	    "\tedge [fontname=\"" + opt.edgeFontName +
	    "\",fontsize=10,labelfontname=\"" + opt.edgeFontName +
	    "\",labelfontsize=10];\n" +
	    "\tnode [fontname=\"" + opt.nodeFontName +
	    "\",fontsize=10,shape=record];"
	);
	if (opt.horizontal)
	    opt.w.println("\trankdir=LR;\n\tranksep=1;");
	if (opt.bgColor != null)
	    opt.w.println("\tbgcolor=\"" + opt.bgColor + "\";\n");
    }

    /** Dot epilogue */
    private static void epilogue(Options opt) {
	opt.w.println("}\n");
	opt.w.flush();
    }
}
