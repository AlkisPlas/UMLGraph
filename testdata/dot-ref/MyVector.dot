#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UmlGraph version 4.2 (http://www.spinellis.gr/sw/umlgraph)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=record];
	// MyVector<E, P>
	c1 [label="{MyVector\<E, P\>\n||~ addAll(index : int, c : Collection\<E\>) : boolean\l~ foo(x : MyVector\<P, MyVector\<E, E\>\>) : MyVector\<E, P\>\l~ removeAll(c : Collection\<?\>) : boolean\l~ set(index : int, element : E) : E\l}", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//MyVector<E, P> extends java.util.Vector<E>
	c2 -> c1 [dir=back,arrowtail=empty];
	c3 -> c1 [dir=back,arrowtail=empty,style=dashed];	//MyVector<E, P> implements java.util.List<E>
	c4 -> c1 [dir=back,arrowtail=empty,style=dashed];	//MyVector<E, P> implements java.util.RandomAccess
	c5 -> c1 [dir=back,arrowtail=empty,style=dashed];	//MyVector<E, P> implements java.lang.Cloneable
	// java.lang.Cloneable
	c5 [label="«interface» \nCloneable", fontname="Helvetica-Oblique", fontcolor="black", fontsize=10.0];
	// java.util.RandomAccess
	c4 [label="«interface» \nRandomAccess", fontname="Helvetica-Oblique", fontcolor="black", fontsize=10.0];
	// java.util.Vector<E>
	c2 [label="{Vector\<E\>\n|# elementData : Object[]\l# elementCount : int\l# capacityIncrement : int\l- serialVersionUID : long\l|+ copyInto(arg0 : Object[])\l+ trimToSize()\l+ ensureCapacity(arg0 : int)\l- ensureCapacityHelper(arg0 : int)\l+ setSize(arg0 : int)\l+ capacity() : int\l+ size() : int\l+ isEmpty() : boolean\l+ elements() : Enumeration\<E\>\l+ contains(arg0 : Object) : boolean\l+ indexOf(arg0 : Object) : int\l+ indexOf(arg0 : Object, arg1 : int) : int\l+ lastIndexOf(arg0 : Object) : int\l+ lastIndexOf(arg0 : Object, arg1 : int) : int\l+ elementAt(arg0 : int) : E\l+ firstElement() : E\l+ lastElement() : E\l+ setElementAt(arg0 : E, arg1 : int)\l+ removeElementAt(arg0 : int)\l+ insertElementAt(arg0 : E, arg1 : int)\l+ addElement(arg0 : E)\l+ removeElement(arg0 : Object) : boolean\l+ removeAllElements()\l+ clone() : Object\l+ toArray() : Object[]\l+ toArray(arg0 : T[]) : T[]\l+ get(arg0 : int) : E\l+ set(arg0 : int, arg1 : E) : E\l+ add(arg0 : E) : boolean\l+ remove(arg0 : Object) : boolean\l+ add(arg0 : int, arg1 : E)\l+ remove(arg0 : int) : E\l+ clear()\l+ containsAll(arg0 : Collection\<?\>) : boolean\l+ addAll(arg0 : Collection\<?\>) : boolean\l+ removeAll(arg0 : Collection\<?\>) : boolean\l+ retainAll(arg0 : Collection\<?\>) : boolean\l+ addAll(arg0 : int, arg1 : Collection\<?\>) : boolean\l+ equals(arg0 : Object) : boolean\l+ hashCode() : int\l+ toString() : String\l+ subList(arg0 : int, arg1 : int) : List\<E\>\l# removeRange(arg0 : int, arg1 : int)\l- writeObject(arg0 : ObjectOutputStream)\l}", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.util.List<E>
	c3 [label="{«interface» \nList\<E\>\n||+ size() : int\l+ isEmpty() : boolean\l+ contains(arg0 : Object) : boolean\l+ iterator() : Iterator\<E\>\l+ toArray() : Object[]\l+ toArray(arg0 : T[]) : T[]\l+ add(arg0 : E) : boolean\l+ remove(arg0 : Object) : boolean\l+ containsAll(arg0 : Collection\<?\>) : boolean\l+ addAll(arg0 : Collection\<?\>) : boolean\l+ addAll(arg0 : int, arg1 : Collection\<?\>) : boolean\l+ removeAll(arg0 : Collection\<?\>) : boolean\l+ retainAll(arg0 : Collection\<?\>) : boolean\l+ clear()\l+ equals(arg0 : Object) : boolean\l+ hashCode() : int\l+ get(arg0 : int) : E\l+ set(arg0 : int, arg1 : E) : E\l+ add(arg0 : int, arg1 : E)\l+ remove(arg0 : int) : E\l+ indexOf(arg0 : Object) : int\l+ lastIndexOf(arg0 : Object) : int\l+ listIterator() : ListIterator\<E\>\l+ listIterator(arg0 : int) : ListIterator\<E\>\l+ subList(arg0 : int, arg1 : int) : List\<E\>\l}", fontname="Helvetica-Oblique", fontcolor="black", fontsize=10.0];
}

